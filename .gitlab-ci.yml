---
stages:
    - build
    - test
    - deploy
    # - deploy_without_packaging
variables:
    DOCKER_BUILD_PATH: "build"
    DOCKER_REG_HOST: "https://k8s-automate:5000"
    IMAGE_APP_HOST: "k8s-automate:5000"
    # Also ${APP_APP_NAME} used in docker-compose!
    APP_APP_NAME: "django-app"
# Test Zone path for check containers on ci/cd server
    APP_TZ_CONF_VARS: "localhost,51.250.2.221"
    DOCKER_TZ_PATH: "testzone"
    DOCKER_TZ_TEST_URL: "http://51.250.2.221:3003"
# APP_SECRET_NAMESPACE is used to create a secret. MUST match the namespace variable in values.yaml
# Because microservices created in that ns want to use credentials from the secret created in the same ns
    APP_SECRET_NAMESPACE: "django"
# before_script:
#     - sudo docker login -u dev/$CI_DOCKER_REG_USERNAME -p dev/$CI_DOCKER_REG_PASSWORD dev/$DOCKER_REG_HOST 

build:
    tags:
        - dev
    stage: build
    environment:                        # Registry user and password from variables scope "dev"
        name: dev
    script:
        - sudo docker login -u $CI_DOCKER_REG_USERNAME -p $CI_DOCKER_REG_PASSWORD $DOCKER_REG_HOST
        - cd $CI_PROJECT_DIR/$DOCKER_BUILD_PATH
        - sudo docker build -t ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA .
        - >
            sudo docker tag ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA \
                ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA
    inherit:
        variables:
            - DOCKER_BUILD_PATH
            - DOCKER_REG_HOST
            - IMAGE_APP_HOST
            - APP_APP_NAME
    rules:
        - changes:
            - templates/*.{yaml, yml}
            - build/**/*    # all files in directory 'build'
            - values.yaml
            - .gitlab-ci.yml

    # when: manual
    # when: always

test:
    tags:
        - dev
    stage: test
    script:
        - cd $CI_PROJECT_DIR/$DOCKER_TZ_PATH
        - sudo mkdir django-app test-db-volume
        - 'sudo echo CHECK TESTZONE URL ${DOCKER_TZ_TEST_URL}'
        - >
            sudo APP_TZ_CONF_VARS=${APP_TZ_CONF_VARS} IMAGE_APP_HOST=${IMAGE_APP_HOST} APP_APP_NAME=${APP_APP_NAME}
            CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA} docker-compose up -d
        # Update set sleep 40 seconds because database is not preparing too fast
        - sleep 40
        - curl_resp=`curl -I ${DOCKER_TZ_TEST_URL} -o /dev/null -w '%{http_code}' -s`;
            if [ "$curl_resp" != 200 ]; then exit 1; fi;
        # For your local curl tests
        - sleep 10
        - sudo docker-compose down
        - sudo rm -fr django-app test-db-volume
        # If only test stage needed
        # - sudo docker rmi ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA
    inherit:
        variables:
            # APP_TZ_CONF_VARS: Allow TZ host (CI/CD server) in app config
            - APP_TZ_CONF_VARS
            - IMAGE_APP_HOST
            - APP_APP_NAME
            - DOCKER_TZ_PATH
            - DOCKER_TZ_TEST_URL
    needs:
        - build
    # when: manual 

deploy:
    tags:
        - dev
    stage: deploy
    environment:                        # Application user and password from variables scope "dev"
        name: dev
    script:
        - sudo docker push ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA
        - |
            cat > app-secrets.env << EOF
            DB_USER=${CI_APP_USERNAME}
            DB_PASS=${CI_APP_PASSWORD}
            EOF
        - >
            sudo kubectl get secrets | grep "app-secrets" &&\
                echo "Secret creation skipped" ||\
                sudo kubectl create secret generic -n ${APP_SECRET_NAMESPACE} app-secrets --from-env-file=app-secrets.env
        # Deploy with helm
        - >
            sudo helm upgrade --install
            --set app.image.regURL=${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA
            ${APP_APP_NAME} .
        # Create new version of "latest" image for use it as default in values.yaml
        # Previous "latest" version will be used if previous CI/CD steps failed
        # To revert to a previous version, try running helm standart install command without --set
        - >
            sudo docker tag ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA \
                ${IMAGE_APP_HOST}/${APP_APP_NAME}:latest
        - sudo docker push ${IMAGE_APP_HOST}/${APP_APP_NAME}:latest
        - |
            if [ -f app-secrets.env ]; then
                rm -f app-secrets.env
            else
                echo "Cleaning up temporary files skipped"
            fi
    inherit:
        variables:
            # Allow prod host (k8s-worker or lb-server) in k8s config
            - IMAGE_APP_HOST
            - APP_APP_NAME
            - APP_SECRET_NAMESPACE
    needs:
        - test


# deploy_without_packaging:
#     tags:
#         - dev
#     stage: deploy_without_packaging
#     script:
#         - sudo docker push ${IMAGE_APP_HOST}/${APP_APP_NAME}:$CI_COMMIT_SHORT_SHA
#         # Deploy without helm
#         - sudo cat additional_manifests/django-app-kubectl/django-app-full.yaml | envsubst > tmp-django-app-full.yaml
#         # Save current generated config to backup directory for testing without helm
#         - sudo kubectl apply -f tmp-django-app-full.yaml
#         - sudo mv tmp-django-app-full.yaml additional_manifests/django-app-kubectl/generated-template-django-app-full.yaml
#     inherit:
#         variables:
#             # Allow prod host (k8s-worker or lb-server) in k8s config
#             - IMAGE_APP_HOST
#             - APP_APP_NAME
#     needs:
#         - test



